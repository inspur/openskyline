#!/usr/bin/env node

/****************************************************************************
    To start in production env:
        APP_ENV=prod NODE_ENV=production ./bin/www
    In Beta
        APP_ENV=beta NODE_ENV=production ./bin/www
    In Dev
        APP_ENV=dev NODE_ENV=development ./bin/www
****************************************************************************/
// https://github.com/shelljs/shelljs
const http = require('http');
const logger = require('log4js').getLogger('http');
process.env.NODE_ENV = 'production';

/**************************server启动*********************************/
const app = require('../app');
const context = require('../lib/Context').getCurrentContext();
let serverAddr = context.getResource('serviceAddr.json');
let bindip = serverAddr.bindip;

logger.warn("bindip:" + bindip);
const httpPort = 80;
const httpServer = http.createServer(app);
httpServer.listen(httpPort, bindip, function(err) {
});

const spdy = require('spdy');
const fs = require('fs');
const path = require('path');
const consts = require('./constants');
const sdpyOptions = {
  key: fs.readFileSync(path.join(__dirname, '..', 'ssl/server-key.pem')),
  cert: fs.readFileSync(path.join(__dirname, '..', 'ssl/server-cert.pem')),
  secureOptions: consts.SSL_OP_NO_TLSv1,
  ciphers: 'ECDHE-RSA-AES128-GCM-SHA256',
  spdy: {
    protocols: ['h2', 'http/1.1'],
    plain: false,
    'x-forwarded-for': true,
    connection: {
      windowSize: 1024 * 1024,
      autoSpdy31: false
    }
  }
};
const spdyPort = 443;
const spdyServer = spdy.createServer(sdpyOptions, app);
spdyServer.listen(spdyPort, bindip);
